---
title: "247Sports recruiting"
format: html
editor: visual
---

###Introduction

This R file will be analyzing correlations recruiting rankings and team performance. All the data used here was pulled from 247Sports top 150 basketball recruit rankings. I got the data by building a web scraper using Python and GitHub Copilot. I ran the scraper through the terminal in VS Code and exported it all as a CSV file locally on my computer.

All of the documentation including transcripts with GitHub Copilot, a README file with information on using the scarper, the script of the scraper itself and all the various CSV files can be found uploaded onto my GitHub repository. That can be accessed here: https://github.com/mdcohen99/SportsData/tree/main/presentations/247sports (THIS WILL NEED TO BE DOWNLOADED TO LOAD IN DATA WITHOUT ERROR).

I scraped every 247Sports basketball top 150 rankings from 2019 through 2024. This allows us to analyze data both over a large enough sample size as well as give us years pre- and post-NIL. I stopped at 2024 since, as of early October, the the 2025 high school class is yet to play in a game.

The central question we want to answer here is: Does getting the top recruits actually equal team success?

We're going to answer that by loading in all the recruiting data and joining it with our existing college basketball logs dataset. Then, we can run correlation tests and build charts to see how it all lines up. Does all the effort that goes into getting the top recruits pay off?

We will use team success in terms of record and NCAA Tournament performance to determine if a team was successful. We can also judge a player's value to their team.

###Loading libraries and data

```{r}
library(lubridate)
library(janitor)
library(showtext)
font_add_google("Montserrat", "montserrat")
showtext_auto()
library(ggrepel)
library(Hmisc)
library(corrplot)
library(tidyverse)
#R kept yelling at me about the group_by being off because of a conflict, so i fed the errors into GPT and apparently the Hmisc library caused an issue, and this is the best fix for it according to Claude 
library(conflicted)
conflict_prefer("summarize", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("select", "dplyr")
```

```{r}
#recruiting data sets
recruits_2019 <- read_csv("recruit_rankings_2019.csv") |> clean_names()
recruits_2020 <- read_csv("recruit_rankings_2020.csv") |> clean_names()
recruits_2021 <- read_csv("recruit_rankings_2021.csv") |> clean_names()
recruits_2022 <- read_csv("recruit_rankings_2022.csv") |> clean_names()
recruits_2023 <- read_csv("recruit_rankings_2023.csv") |> clean_names()
recruits_2024 <- read_csv("recruit_rankings_2024.csv") |> clean_names()

#CBB logs data set
cbb_logs <- read_csv("https://dwillis.github.io/sports-data-files/cbblogs1525.csv")
```

###Describing the data

How many rows and columns are in each data set?

```{r}
glimpse(recruits_2019)
glimpse(recruits_2020)
glimpse(recruits_2021)
glimpse(recruits_2022)
glimpse(recruits_2023)
glimpse(recruits_2024)
glimpse(cbb_logs)
```

Lets get some basic summary on the recruiting data. We'll have to bind the data sets together and then we can figure things out like which schools were most successful and a distribution of recruit type.

(I got an error about in binding the rows originally because the column types were different somehow, so we're fixing that here with some ChatGPT help)

```{r}
recruits_2019$weight <- as.numeric(recruits_2019$weight)
recruits_2020$weight <- as.numeric(recruits_2020$weight)
recruits_2021$weight <- as.numeric(recruits_2021$weight)
recruits_2022$weight <- as.numeric(recruits_2022$weight)
recruits_2023$weight <- as.numeric(recruits_2023$weight)
recruits_2024$weight <- as.numeric(recruits_2024$weight)
```

```{r}
joined_recruiting <- bind_rows(
  recruits_2019,
  recruits_2020,
  recruits_2021,
  recruits_2022,
  recruits_2023,
  recruits_2024)
```

```{r}
#schools with the most total recruits landed 
joined_recruiting |> 
  group_by(commitment) |> 
  summarize(total_recruits = n()) |> 
  arrange(desc(total_recruits)) 

#schools with the best average ranked player, filted to avoid the random one off school that gets one guy
joined_recruiting |> 
  group_by(commitment) |> 
  summarize(avg_rank = mean(rank, na.rm = TRUE),
            total_recruits = n()) |> 
  arrange(avg_rank) |> 
  filter(total_recruits >= 5)

#schools with the best average star rating, same filtering rule
joined_recruiting |> 
  group_by(commitment) |> 
  summarize(avg_stars = mean(stars, na.rm = TRUE),
            total_recruits = n()) |> 
  arrange(desc(avg_stars)) |> 
  filter(total_recruits >= 5)
```

Now lets make a bar chart. We're going to look to look at total recruits for a school first, and then we're going to to make a grouped bar chart based how many of each rating of player a school got.

```{r}
joined_recruiting |> 
  group_by(commitment) |> 
  summarize(total_recruits = n()) |> 
  arrange(desc(total_recruits)) |> 
  filter(total_recruits >= 15) |> 
  ggplot(aes(x = reorder(commitment, -total_recruits), y = total_recruits)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Which college landed the most recruits between 2019 and 2024?",
       x = "",
       y = "") +
  theme_minimal() +
  theme(
    axis.text = element_text(angle = 45, hjust = 1, family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )
```

```{r}
#(used a little bit of ChatGPT on the syntax here)

joined_recruiting |> 
  group_by(commitment, stars) |> 
  summarize(total_recruits = n()) |> 
  filter(commitment %in% c("Duke", "Kentucky", "Arizona", "Alabama", "Kansas", "UConn", "North Carolina", "Illinois", "Michigan", "Tennessee", "Maryland")) |> 
  ggplot(aes(x = reorder(commitment, -total_recruits), y = total_recruits, fill = as.factor(stars))) +
  geom_bar(stat = "identity", position = "dodge") +
  labs(title = "Which college landed the most recruits between 2019 and 2024?",
       x = "",
       y = "",
       fill = "Stars") +
  theme_minimal() +
  theme(
    axis.text = element_text(angle = 45, hjust = 1, family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )
```

And let's look at some of the game log data to see how the best teams are. We'll need to know that to correlate it with the recruiting data

```{r}
#best teams
cbb_logs |> 
  group_by(Team) |> 
  summarize(total_wins = sum(W_L == "W"),
            total_losses = sum(W_L == "L")) |> 
  arrange(desc(total_wins)) 

#worst teams
cbb_logs |> 
  group_by(Team) |> 
  summarize(total_wins = sum(W_L == "W"),
            total_losses = sum(W_L == "L")) |> 
  arrange(desc(total_losses)) 

#chart of best teams
cbb_logs |> 
  group_by(Team) |> 
  summarize(total_wins = sum(W_L == "W")) |> 
  filter(total_wins >= 200) |>
  ggplot(aes(x = reorder(Team, -total_wins), y = total_wins)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Which college had the most wins between 2019 and 2024?",
       x = "",
       y = "") +
  theme_minimal() +
  theme(
    axis.text = element_text(angle = 45, hjust = 1, family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )
  
```

The biggest issue I'm likely going to have here is joining the game log data with the recruiting data so that we can do a correlation. We can't bind the rows so we'll have to do some sort of join. What column should that be based on? Seems a little bit unclear. But we'll need to do that to run any sort of correlation test between the game data and the recruiting data.

I'm really happy with the vast amount of data I have here. There is a ton I can do with this, especially with regard to creating visualizations.

###Next steps: Is there correlation?

Next, we're going to join the recruiting data with the game log data. To determine whether recruiting at a high level does line up with winning, we need to run some correlation tests and build a scatterplot. That way we can see how teams perform relative to national recruiting averages.

```{r}
grouped_logs <- cbb_logs |> 
  group_by(Team) |> 
  summarize(total_wins = sum(W_L == "W"),
            total_losses = sum(W_L == "L"),
            win_pct = (total_wins / (total_wins + total_losses)), 
            total_pts = sum(TeamScore),
            total_opp_pts = sum(OpponentScore),
            avg_fgpct = mean(TeamFGPCT),
            avg_opp_fgpct = mean(OpponentFGPCT),
            total_rebounds = sum(TeamTotalRebounds),
            total_turnovers = sum(TeamTurnovers),
            total_assists = sum(TeamAssists)
          )
```

```{r}
#this took an insanely long time because of figuring out all the various very very very tiny discrepancies between names of schools between the two data sets. 

name_fixes <- c(
  "Connecticut" = "UConn",
  "Mississippi" = "Ole Miss",
  "Southern California" = "USC",
  "Brigham Young" = "BYU",
  "Louisiana State" = "LSU",
  "Virginia Commonwealth" = "VCU",
  "Massachusetts" = "UMass",
  "South Florida" = "USF",
  "Southern Methodist" = "SMU",
  "St. John's (NY)" = "St. John's",
  "Miami (FL)" = "Miami",
  "Loyola (MD)" = "Loyola Maryland",
  "Saint Mary's (CA)" = "Saint Mary's",
  "Nevada-Las Vegas" = "UNLV"
)

# used GPT for some syntax here
grouped_logs <- grouped_logs |>
  mutate(Team = ifelse(Team %in% names(name_fixes),
                       name_fixes[Team],
                       Team))
```

```{r}
joined_logs <- joined_recruiting |> 
  left_join(grouped_logs, by = c("commitment" = "Team")) 
```

NOTE: The joined data frame here had NA values for all the various statistics for the recruits who decided either to play professionally or if there was no input for their college choice. Of course, there are no stats to join with if the player did not play in college. So we'll have to filter those out, or at least ignore them. We are strictly focused on college performance here. So it is pretty fundamental that you did actually have to play at a college.

```{r}
cor_data_stars <- joined_logs |> 
  select(commitment, stars, win_pct) |> 
  group_by(commitment) |> 
  summarize(avg_recruit = mean(stars),
            win_pct = mean(win_pct, na.rm = TRUE),
            .groups = "drop"
            ) 
  
cor.test(cor_data_stars$avg_recruit, cor_data_stars$win_pct, method = "pearson")


howard <- cor_data_stars |> filter(commitment == "Howard")
milwaukee <- cor_data_stars |> filter(commitment == "Milwaukee")
vcu <- cor_data_stars |> filter(commitment == "VCU")
saint_marys <- cor_data_stars |> filter(commitment == "Saint Mary's")
duke <- cor_data_stars |> filter(commitment == "Duke")
gonzaga <- cor_data_stars |> filter(commitment == "Gonzaga")
labeled_schools <- bind_rows(howard, milwaukee, vcu, saint_marys, duke, gonzaga)


#scatterplot, yes i made duke carolina blue on purpose
cor_data_stars |> 
  ggplot() +
  geom_point(data = cor_data_stars, aes(x = avg_recruit, y = win_pct)) +
  geom_point(data = howard, aes(x = avg_recruit, y = win_pct), color = "red") +
  geom_point(data = milwaukee, aes(x = avg_recruit, y = win_pct), color = "darkgreen") +
  geom_point(data = vcu, aes(x = avg_recruit, y = win_pct), color = "gold") +
  geom_point(data = saint_marys, aes(x = avg_recruit, y = win_pct), color = "blue") +
  geom_point(data = duke, aes(x = avg_recruit, y = win_pct), color = "#4B9CD3") +
  geom_point(data = gonzaga, aes(x = avg_recruit, y = win_pct), color = "orange") +
  geom_smooth(data = cor_data_stars, aes(x = avg_recruit, y = win_pct), method = "lm", color = "purple") +
  geom_text_repel(data = labeled_schools, 
                  aes(x = avg_recruit, y = win_pct, label = commitment),
                  family = "montserrat",
                  size = 3.5,
                  max.overlaps = 20) +
  labs(title = "No correlation between win percentage and top recruits",
       subtitle = "But some teams do far outperform their recruits' ratings.",
       x = "Average recruit star rating",
       y = "Team win percentage") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )
```

The data is pretty clear: there is no relationship between recruiting at a high level and winning games. In fact, the relationship isn't even statistically significant. The correlation value is basically 0 and the p value is 0.44, which is way too high.

I then put this relationship into a scatter plot so we can visualize it and the visual is indeed an incredibly obvious lack of relationship. The line of best fit is basically flat. There are a few interesting cases in this table, however.

Saint Mary's and VCU both great perform the recruiting ranking of their players. Both teams recruit at a 3.5 average recruit ranking. Both schools landed four total top 150 recruits since between 2019 and 2024, which is enough to have a reasonable sample size, but of course the rosters at schools like those are also filled out by players who are not ranked at all. Yet both schools have among the 11 best winning percentages in the country during the same time frame. VCU also had two different head coaches (Mike Rhoades and Ryan Odom) during this time and continued winning at a high clip. Both Rhoades (Penn State) and Odom (Virginia) have gone onto major Power 4 jobs. At Saint Mary's, head coach Randy Bennett has been in charge since 2001 and has only had one losing season the whole time. That was his first season, too. Saint Mary's has become a well known name in the sport because of how much its done with less recruiting talent. The Gaels have made the NCAA Tournament five times during this data set, and would have been a high seed yet again in the 2020 NCAA Tournament had it occurred.

The other end of the spectrum are smaller programs like Howard and Milwaukee which each landed a one-off five-star recruit. The point here is that the data shows one very highly rated player doesn't turn your program around. Maker was injured just two games into his freshman year at Howard and went to play professionally after that season. Similarly, Patrick Baldwin Jr. committed to UW-Milwaukee to play for his father, but spent his one and only college season back and forth dealing with injuries. Milwaukee went 10-22 that year.

So landing top recruits doesn't guarantee success. In the case of Milwaukee and Howard, injuries played a major role in keeping their anticipated stars off the court. But unlike a program in Duke which both recruits at a high level and performs, neither of those smaller programs have the infrastructure to withstand the one time they get a highly rated player and said player can't consistently be on the court.

There are clearly other factors at play here. Program success is not dependent on just recruiting the best talent. So let's look at those other factors in a correlation matrix.

```{r}
matrix_prep <- joined_logs |> 
  dplyr::group_by(commitment) |> 
  dplyr::summarize(
    avg_stars = mean(stars, na.rm = TRUE),
    avg_rank = mean(rank, na.rm = TRUE),
    win_pct = mean(win_pct, na.rm = TRUE),
    totalpoints = sum(total_pts, na.rm = TRUE),
    totalpointsallowed = sum(total_opp_pts, na.rm = TRUE),
    pointdif = sum(total_pts, na.rm = TRUE) - sum(total_opp_pts, na.rm = TRUE),
    total_rebounds = sum(total_rebounds, na.rm = TRUE),
    total_turnovers = sum(total_turnovers, na.rm = TRUE),
    avg_fgpct = mean(avg_fgpct, na.rm = TRUE),
    avg_opp_fgpct = mean(avg_opp_fgpct, na.rm = TRUE),
    .groups = "drop"
  )

matrix_data <- matrix_prep |>
  select(-commitment) |>
  na.omit()

cormatrix <- rcorr(as.matrix(matrix_data))
cormatrix$r

#Copilot suggested to me that i should write in this corrplot, but I didn't really know much about it so I googled it before adding this, but this is AI-written code 
corrplot(cormatrix$r, 
         method = "color",
         type = "upper",
         order = "hclust",
         addCoef.col = "black",
         number.cex = 0.7,
         tl.col = "black",
         tl.srt = 45)
```

So this matrix gives us a couple of useful tidbits. There are some somewhat strong negative relationships between the rank of a recruit (lower rank number is better) and point differential, turnovers, points allowed, total points, and total rebounds. The average stars metric has some positive relationships with those same metrics (of course, again, that negative relationship for the rank is because R doesn't understand that a lower rank is a better rank).

Let's put some of those relationships into scatterplots.

```{r}
#avg_rank vs point_dif
matrix_prep |> 
  ggplot(aes(x = avg_rank, y = pointdif)) +
  geom_point() +
  geom_smooth(method = "lm", color = "purple") +
  labs(title = "Average recruit rankings have slight negative relationships with several game statistics",
       x = "Average recruit rank",
       y = "Point differential") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )

#avg_rank vs turnovers
matrix_prep |> 
  ggplot(aes(x = avg_rank, y = total_turnovers)) +
  geom_point() +
  geom_smooth(method = "lm", color = "purple") +
  labs(title = "Average recruit rankings have slight negative relationships with several game statistics",
       x = "Average recruit rank",
       y = "Total turnovers") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )

#avg_rank vs totalpts
matrix_prep |> 
  ggplot(aes(x = avg_rank, y = totalpoints)) +
  geom_point() +
  geom_smooth(method = "lm", color = "purple") +
  labs(title = "Average recruit rankings have slight negative relationships with several game statistics",
       x = "Average recruit rank",
       y = "Total points") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )

#avg_rank vs totalptsallowed
matrix_prep |> 
  ggplot(aes(x = avg_rank, y = totalpointsallowed)) +
  geom_point() +
  geom_smooth(method = "lm", color = "purple") +
  labs(title = "Average recruit rankings have slight negative relationships with several game statistics",
       x = "Average recruit rank",
       y = "Total points allowed") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )


#avg_rank vs rebounds
matrix_prep |> 
  ggplot(aes(x = avg_rank, y = total_rebounds)) +
  geom_point() +
  geom_smooth(method = "lm", color = "purple") +
  labs(title = "Average recruit rankings have slight negative relationships with several game statistics",
       x = "Average recruit rank",
       y = "Total rebounds") +
  theme_minimal() +
  theme(
    axis.text = element_text(family = "montserrat"),
    title = element_text(size = 12, family = "montserrat")
  )

```

So what do these slight relationships mean? It is probably complicated.

Does it make sense that having better players may lead to better game statistics? Probably? Maybe? But if that's the case, then why isn't it correlated with winning?

The teams in the upper left end of the point differential scatter plot are the usual suspects: Duke, Kentucky, Gonzaga, Arizona, North Carolina. Those are all schools that recruit at a high level and also have strong point differentials. And yet, those teams have accounted for exactly zero national championships during this data set. So something else is at play. Is it coaching? Program culture? Program development? Support staff? Strength training? This data doesn't account for that.

But it is certainly interesting to see a relationship between game stats and recruiting rankings, but not winning.
